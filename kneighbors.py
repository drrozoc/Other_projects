# -*- coding: utf-8 -*-
"""Kneighbors

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1aDvKMLD0xgTz9xNy5fSXjewVONhxpSWj
"""

import numpy as np
import matplotlib.pyplot as plt
from sklearn.neighbors import KNeighborsClassifier

# Step 1: Establish 4 points with CSI values
points = {
    'A': np.array([10, 20, 30]),  # Coordinates for point A
    'B': np.array([15, 25, 35]),  # Coordinates for point B
    'C': np.array([20, 30, 40]),  # Coordinates for point C
    'D': np.array([25, 35, 45])   # Coordinates for point D
}

# Step 2: Create experimental data with noise
num_samples = 100  # Number of samples per point
experimental_data = []  # Store experimental data
true_labels = []  # Store true labels
for label, csi_values in points.items():
    for _ in range(num_samples):
        noisy_csi = csi_values + np.random.normal(0, 2, len(csi_values))  # Add Gaussian noise
        experimental_data.append(noisy_csi)
        true_labels.append(label)

# Step 3: Implement classification algorithm
X_train = np.array(list(points.values()))  # Training data
y_train = np.array(list(points.keys()))    # Training labels

knn_classifier = KNeighborsClassifier(n_neighbors=3)  # Create KNN classifier with 3 neighbors
knn_classifier.fit(X_train, y_train)  # Fit the classifier to the training data

# Step 4: Graph
plt.figure(figsize=(10, 8))  # Set figure size

# Plot established points
for label, csi_values in points.items():
    plt.scatter(csi_values[0], csi_values[1], label=f'Point {label}')  # Plot each established point

# Plot experimental data for each established point
colors = {'A': 'blue', 'B': 'green', 'C': 'orange', 'D': 'purple'}  # Assign colors for each point
for label, csi_values in points.items():
    data_indices = [i for i, true_label in enumerate(true_labels) if true_label == label]
    classified_data = [experimental_data[i] for i in data_indices]
    plt.scatter([d[0] for d in classified_data], [d[1] for d in classified_data], color=colors[label], alpha=0.5, label=f'Experimental Data ({label})')

# Step 5: Plot classification results
# Plot classified experimental data
for i, csi_values in enumerate(experimental_data):
    predicted_label = knn_classifier.predict([csi_values])  # Predict the label for each data point
    plt.scatter(csi_values[0], csi_values[1], color='red', marker='x', label=f'Classified Data ({predicted_label[0]})' if i == 0 else None)

plt.xlabel('CSI Value 1')  # Set x-axis label
plt.ylabel('CSI Value 2')  # Set y-axis label
plt.title('CSI Data and Experimental Data')  # Set title
plt.legend()  # Show legend
plt.grid(True)  # Show grid
plt.show()  # Display plot